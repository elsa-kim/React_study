/*
ReactDOM.render(첫번째 파라미터 : 페이지에 렌더링할 내용 JSX 형태로, 두번째 : 해당 JSX를 렌더링 할 document 내부 요소 설정) 
  : 컴포넌트를 페이지에 렌더링하는 역할, react-dom 모듈 불러와 사용
  
JSX 문법
  1. 컴포넌트에 여러 요소가 있다면 부모 요소 하나로 감싸야 함 : virtual DOM에서 컴포넌트 변화 감지할 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 하나의 DOM 트리 구조로 이뤄저야 한다는 규칙이 있기 때문
  2. JSX 내부에 자바스크립트 표현식을 작성하려면 코드를 {}로 감싸기
  3. JSX 내부 자바스크립트 표현식에서 if문 사용못함 : JSX 밖에서 사용해 사전에 값 변경하거나 {} 안에 삼항 연산자 사용
  4. AND 연산자(&&) 사용해 조건부 렌더링 : 리액트에서 false와 null 렌더링 시 아무것도 나타나지 않음, flasy 한 값인 0은 예외적으로 화면에 나타남
  5. 리액트 컴포넌트는 함수에서 undefined만 반환해 렌더링하는 상황을 만들면 안됨, OR 연산자(||) 사용해 해당 값 undefined일 때 사용할 값 지정해 오류 방지
    JSX 내부에서 undefined 렌더링하는 것은 괜찮음
  6. 리액트에서 DOM 요소에 스타일 적용할 때 문자열 형태가 아닌 객체 형태로 넣어야 함, 카멜 표기법 사용해 작성, 단위 생략시 px로 지정됨
  7. JSX에서는 class가 아닌 className으로 설정
  8. 태그 꼭 닫아야 함, 태그 사이에 별도의 내용이 들어가지 않는 경우 self-closing
  9. 주석 {/* … * /}와 같은 형식으로 작성(띄어쓰기 없이)

ESLint : 문법 검사 도구

Prettier : 코드 스타일 자동 정리 도구
  루트 디렉터리에서 .prettierrc 파일 생성 후 스타일 커스터마이징

컴포넌트 선언
  1. 함수형 컴포넌트 : 선언이 편리함, 메모리 자원도 덜 사용, state와 라이프사이클 API 사용 불가하지만 Hooks 기능 도입으로 해결
  2. 클래스형 컴포넌트 : state 기능 및 라이프사이클 기능 사용 가능, 임의 메서드 정의 가능
    render 함수 필수, 그 안에서 보여줘야 할 JSX 반환

state : 컴포넌트 내부에서 바뀔 수 있는 값
  - 종류
    1. 클래스형 컴포넌트가 지니고 있는 state
    2. 함수형 컴포넌트에서 useState라는 함수 통해 사용하는 state


*/
